@use 'breakpoints.module' as b;
@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';

@function css-property($value) {
  @if type_of($value) == string {
    @return string.unquote($value);
  } @else {
    @return $value;
  }
}

@function split-screens($screen) {
  $string: string.unquote('#{$screen}');
  $sep-id: string.index(string.quote($string), '-');

  @if $sep-id {
    @return (string.quote(string.slice($string, 0, $sep-id - 1)), string.quote(string.slice($string, $sep-id + 1)));
  } @else {
    @return $string;
  }
}

@function add-query($acc, $width, $direction) {
  @return $acc + ' and (#{$direction}-width: #{$width}px)';
}

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: string.slice($value, $i, $i);

    @if list.index(map.keys($numbers), $character) or $character == '.' {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map.get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + math.div(map.get($numbers, $character), $digits);
      }
    }
  }

  @return if($minus, -$result, $result);
}

@function get-width-value($_screen) {
  @return to-number(if(map.has-key(b.$breakpoints, $_screen), map.get(b.$breakpoints, $_screen), $_screen));
}

@function fluid-typography($font-start, $font-end, $screen-from, $screen-to) {
  @return calc(
    #{$font-start * 0.0625}rem + (($font-end - $font-start) * (100vw - #{$screen-from}px) / ($screen-to - $screen-from))
  );
}

@function generate-query($screen, $media-direction, $orientation) {
  $query: 'only screen';

  @if type_of($screen) == 'list' {
    $min-screen: get-width-value(list.nth($screen, 1));
    $max-screen: get-width-value(list.nth($screen, 2)) - 0.02;

    @if $min-screen == min or $min-screen == max {
      $query: add-query($query, $max-screen, $min-screen);
    } @else {
      $query: add-query($query, $min-screen, 'min');
      $query: add-query($query, $max-screen, 'max');
    }
  } @else if type_of($screen) == 'number' or 'string' {
    $query: add-query($query, get-width-value($screen), $media-direction);
  } @else {
    @error "Incorrect screen type. Only a string ('200-lg' or 200-lg) and a number (single 300 or range with quotes '200-500') are allowed.";
  }

  @if $orientation {
    $query: $query + ' and (orientation: #{$orientation})';
  }

  @return $query;
}

@mixin media($properties, $orientation: false) {
  $media-direction: 'min' !default;

  @if type_of($properties) == 'string' {
    @media #{generate-query(split-screens($properties), $media-direction, $orientation)} {
      @content;
    }
  }

  @each $property, $value in $properties {
    @if type_of($value) == 'map' {
      @each $screen, $val in $value {
        $screen: split-screens($screen);

        @if $screen == all {
          #{$property}: css-property($val);
        }

        @media #{generate-query($screen, $media-direction, $orientation)} {
          #{if($property == 'fluid-typography', 'font-size', $property)}: css-property($val);
        }
      }
    } @else {
      #{$property}: css-property($value);
    }
  }
}
